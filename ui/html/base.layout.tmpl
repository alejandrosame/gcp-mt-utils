{{define "base"}}
<!doctype html>
<html lang='en'>
    <head>
        <meta charset='utf-8'>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>{{template "title" .}} - Custom translations</title>
        <!-- Link to the CSS stylesheet and favicon -->
        <link rel='stylesheet' type="text/css"  href='/static/css/main.css'>
        <link rel='stylesheet' type="text/css"  href='/static/css/loading.animation.css'>
        <link rel="stylesheet" type="text/css" href="/static/css/swup/base.css" />
        <!-- Head script for landingpage -->
        <link rel="stylesheet" type="text/css" href="/static/css/landing/base.css"/>
        <link rel='shortcut icon' href='/static/img/favicon.ico' type='image/x-icon'>
        <!-- Also link to some fonts hosted by Google -->
        <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Ubuntu+Mono:400,700'>
        <!-- Bootstrap css -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
        <link rel='stylesheet' type="text/css"  href='/static/css/override.bootstrap.css'>
        <!-- Add scripts -->
        <!-- Bootstrap -->
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"></script>
        <!-- Swup -->
        <script src="/static/js/swup/dist/swup.js"></script>
        <!-- Landing page js -->
        <script src="/static/js/landing/imagesloaded.pkgd.min.js"></script>
        <script src="/static/js/landing/TweenMax.min.js"></script>
        <script src="/static/js/landing/demo.js"></script>

        <script>document.documentElement.className="js";var supportsCssVars=function(){var e,t=document.createElement("style");return t.innerHTML="root: { --tmp-var: bold; }",document.head.appendChild(t),e=!!(window.CSS&&window.CSS.supports&&window.CSS.supports("font-weight","var(--tmp-var)")),t.parentNode.removeChild(t),e};supportsCssVars()||alert("Please view this page in a modern browser that supports CSS Variables.");</script>
    </head>
    <body class="bg-dark">
        <header>
            <nav class="navbar navbar-expand-lg bg-dark navbar-dark fixed-top justify-content-center">
                <a class="navbar-brand d-inline" id="swup" href="/"
                    ><img src="/static/img/logo.png" width="72px"> {{if .AuthenticatedUser}}{{.Languages}}{{end}}</a>
                <div class="navbar-text justify-content-between text-center w-100"
                    ><b>Psalm 68:11</b> - <i>The Lord gave the word: great was the company of those that published it.</i></div>
                <button class="navbar-toggler bg-dark flex-row justify-content-center flex-nowrap w-100" type="button" data-toggle="collapse" data-target="#collapsibleNavbar">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse flex-row justify-content-center flex-nowrap" id="collapsibleNavbar">
                    <ul class="navbar-nav">
                        {{if .AuthenticatedUser}}
                            {{if or .AuthenticatedUser.Validator .AuthenticatedUser.Admin}}
                                <li class="nav-item bg-dark">
                                    <a class="nav-link bg-dark" href='/pair'>Manage pairs</a>
                                </li>
                            {{end}}
                            {{if or .AuthenticatedUser.Translator .AuthenticatedUser.Admin}}
                                <li class="nav-item bg-dark">
                                    <a class="nav-link bg-dark" href='/translate'>Translate text</a>
                                </li>
                            {{end}}
                            {{if .AuthenticatedUser.Admin}}
                                <li class="nav-item dropdown bg-dark">
                                    <a class="nav-link dropdown-toggle bg-dark" id="navbardrop" data-toggle="dropdown">Admin</a>
                                    <div class="dropdown-menu bg-dark">
                                        <a class="dropdown-item nav-link bg-dark" href='/model'>Manage models</a>
                                        <a class="dropdown-item nav-link bg-dark" href='/dataset'>Manage datasets</a>
                                        <a class="dropdown-item nav-link bg-dark" href='/train/status'>Training status</a>
                                        <a class="dropdown-item nav-link bg-dark" href='/user/limit'>
                                            Manage user translation limit
                                        </a>
                                        <a class="dropdown-item nav-link bg-dark" href='/user/signup/invitation/generate'>
                                            Create invitation link
                                        </a>
                                    </div>
                                </li>
                            {{end}}

                            <li class="nav-item nav-end bg-dark">
                                <a class="nav-link bg-dark" href='/about'>About</a>
                            </li>

                            <li class="nav-item nav-end bg-dark">
                                <form action='/user/logout' method='POST'>
                                    <input type='hidden' name='csrf_token' value='{{.CSRFToken}}'>
                                    <button class="nav-link bg-dark" >Logout ({{.AuthenticatedUser.Name}})</button>
                                </form>
                            </li>
                        {{else}}
                            <li class="nav-item nav-end bg-dark">
                                <a class="nav-link bg-dark" href='/about'>About</a>
                            </li>

                            <li class="nav-item nav-end bg-dark">
                                <a class="nav-link bg-dark" href='/user/login'>Login</a>
                            </li>
                        {{end}}
                    </ul>
                </div>
            </nav>
        </header>

        <div id="swup" class="first-container">
            {{with .Flash}}
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class='alert alert-success font-weight-bold text-center'>{{.}}</div>
                    </div>
                </div>
            </div>
            {{end}}
            <main class="container content bg-dark transition-fade">
                {{template "body" .}}
            </main>
        </div>

        <div class="container">
            <div class="row">
                <div class="col">
                    <button id="go-top-button" class="btn btn-outline-light btn-sm btn-block invisible">Go to top</button>
                </div>
            </div>
        </div>

        {{template "footer" .}}
        <!-- And include the JavaScript file -->
        <!--
        <script src="/static/js/main.js" type="text/javascript"></script>
        -->
        <script type="text/javascript">
            let options = {
                debugMode: false,
                cache: false
            }
            const swup = new Swup(options);

            function init () {
                // Enable tooltips
                $('[data-toggle="tooltip"]').tooltip('dispose');
                $('[data-toggle="tooltip"]').tooltip({
                    trigger : 'hover'
                });
                $('[data-toggle="tooltip"]').tooltip('enable');

                // Reload only on landing page
                var element = document.getElementById('landing-menu');
                if (typeof(element) != 'undefined' && element != null)
                {
                    const controller = new NavController(document.querySelector('.menu'));
                    // Preload all the images in the page..
                    imagesLoaded(document.querySelectorAll('.grid__item'), {background: true},
                                 () => document.body.classList.remove('loading'));


                    waitForNextMenuItem();

                    function waitForNextMenuItem() {
                        setTimeout(nextMenuItem, 3000);
                    }

                    function nextMenuItem() {
                        var items = document.getElementsByClassName("menu__item");
                        var size = items.length;
                        var current;
                        for (var i=0, im=size; im>i; i++) {
                            if (items[i].classList.contains("menu__item--current")) {
                                current = i;
                            }
                        }

                        var next = (current + 1)%(size);
                        items[next].getElementsByClassName('menu__item-text')[0].click();

                        waitForNextMenuItem();
                    }
                }else
                {
                    window.onscroll = function() {scrollFunction()};
                    document.getElementById("go-top-button").onclick = function() {topFunction();}

                    function scrollFunction() {
                      if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                        document.getElementById("go-top-button").classList.remove("invisible");
                      } else {
                        document.getElementById("go-top-button").classList.add("invisible");
                      }
                    }

                    // When the user clicks on the button, scroll to the top of the document
                    function topFunction() {
                      document.body.scrollTop = 0;
                      document.documentElement.scrollTop = 0;
                    }
                }

                // Reload only on translate UI
                var element = document.getElementById('source-text');
                if (typeof(element) != 'undefined' && element != null)
                {
                    $('#source-text').bind({
                        paste : function(e){
                            e.stopPropagation();
                            e.preventDefault();

                            var cd = e.originalEvent.clipboardData;

                            $('#source-text').html(formatTextWithDiv(cd.getData("text/plain")));
                        }
                    });
                }

                // Reload only on translate UI
                var element = document.getElementById('translating-wheel-1');
                if (typeof(element) != 'undefined' && element != null)
                {
                    translateButton1 = document.getElementById('translate-button-1');
                    translateButton2 = document.getElementById('translate-button-2');
                    exportButton1 = document.getElementById('export-button-1');
                    exportButton2 = document.getElementById('export-button-2');

                    translateButton1.onclick = function() {translate();}
                    translateButton2.onclick = function() {translate();}
                    exportButton1.onclick = function() {exportTranslation();}
                    exportButton2.onclick = function() {exportTranslation();}
                }
            }

            init();
            document.addEventListener('swup:willReplaceContent', init);
            document.addEventListener('swup:contentReplaced', init);

            function selectAllExport(source) {
                checkboxes = document.getElementsByClassName('export-pair');
                for(var i=0, n=checkboxes.length;i<n;i++) {
                    checkboxes[i].checked = source.checked;
                }
            }

            function getPairIdsToExport() {
                checkboxes = document.getElementsByClassName('export-pair');
                ids = ""
                for(var i=0, n=checkboxes.length;i<n;i++) {
                    if(checkboxes[i].checked){
                        ids = ids + checkboxes[i].value + ","
                    }
                }
                return ids.replace(/,$/g, '');
            }

            function submitExportPairForm(book, chapter) {
                document.exportPairForm.idList.value = getPairIdsToExport();
                document.exportPairForm.action="/pairs/book/"+book+"/chapter/"+chapter+"/export";
                document.exportPairForm.submit();
                window.location = "/pair/book/"+book+"/chapter/"+chapter;
            }

            function submitExportAllPairForm() {
                document.exportAllPairForm.idList.value = getPairIdsToExport();
                document.exportAllPairForm.action="/pairs/export";
                document.exportAllPairForm.submit();
                window.location = "/pair";
            }

            function submitTranslateFileForm() {
                $( "#modelForm" ).val($( "#model option:selected" ).val())
                document.exportPairForm.submit();
                window.location = "/translate";
            }

            function selectAllValidation(source) {
                checkboxes = document.getElementsByClassName('select-pair');
                for(var i=0, n=checkboxes.length;i<n;i++) {
                    checkboxes[i].checked = source.checked;
                }
            }

            function getPairIdsToValidate() {
                checkboxes = document.getElementsByClassName('select-pair');
                ids = ""
                for(var i=0, n=checkboxes.length;i<n;i++) {
                    if(checkboxes[i].checked){
                        ids = ids + checkboxes[i].value + ","
                    }
                }
                return ids.replace(/,$/g, '');
            }

            function submitUnvalidateSelected(form) {
                form.idList.value = getPairIdsToValidate()
                form.submit();
            }

            function submitValidateSelected(form) {
                form.idList.value = getPairIdsToValidate()
                form.submit();
            }

            function sleep(milliseconds) {
              var start = new Date().getTime();
              for (var i = 0; i < 1e7; i++) {
                if ((new Date().getTime() - start) > milliseconds){
                  break;
                }
              }
            }

            function translatingStatusStarted() {
                translateButton1 = document.getElementById('translate-button-1');
                translateButton2 = document.getElementById('translate-button-2');
                exportButton1 = document.getElementById('export-button-1');
                exportButton2 = document.getElementById('export-button-2');
                translatingWheel1 = document.getElementById('translating-wheel-1');
                translatingWheel2 = document.getElementById('translating-wheel-2');

                translateButton1.disabled = true;
                translateButton2.disabled = true;
                exportButton1.disabled = true;
                exportButton2.disabled = true;
                translatingWheel1.classList.remove("invisible");
                translatingWheel2.classList.remove("invisible");
            }

            function translatingStatusFinished(errorCode, charactersUsed) {
                translateButton1 = document.getElementById('translate-button-1');
                translateButton2 = document.getElementById('translate-button-2');
                exportButton1 = document.getElementById('export-button-1');
                exportButton2 = document.getElementById('export-button-2');
                translatingWheel1 = document.getElementById('translating-wheel-1');
                translatingWheel2 = document.getElementById('translating-wheel-2');

                translateButton1.disabled = false;
                translateButton2.disabled = false;
                exportButton1.disabled = false;
                exportButton2.disabled = false;
                translatingWheel1.classList.add("invisible");
                translatingWheel2.classList.add("invisible");

                if (errorCode != "None") {
                    if (errorCode == "reached"){
                        alert("COULD NOT TRANSLATE: Your monthly translation limit was reached.\n"+
                              "Please contact an admin to if you wish to increase your monthly translation limit.");
                    } else if (errorCode == "surpassed"){
                        alert("COULD NOT TRANSLATE: The text your are trying to translate will surpass your monthly translation limit.\n"+
                              " Try to translate a smaller text or contact an admin if you wish to increase your monthly translation limit.");
                    } else if (errorCode == "translation_errors"){
                        alert("PROBLEMS TRANSLATING: Some parts of the text were not translated successfully.");
                    } else {
                        alert(errorCode);
                    }
                }

                document.getElementById('characters-used').textContent = charactersUsed;
            }

            function reconstructText(ele) {
                var text = "";
                var divs = ele.getElementsByTagName("div");
                for(var i = 0; i < divs.length-1; i++){
                   text += divs[i].textContent + "\n";
                }
                text += divs[divs.length-1].textContent

                return text;
            }

            function formatTextWithDiv(inputText){
                var formattedText = "";

                if(inputText == "\n") return "<div></div>";

                var text = splitLines(inputText);
                for (var i=0;i<text.length;i++){
                    formattedText += "<div>" + text[i]+"</div>";
                }

                return formattedText;
            }

            function splitLines(text) {
                var lines = [];
                var currentLine = "";
                for (var i=0;i<text.length;i++)
                {
                    if (text[i] == '\n'){
                        lines.push(currentLine);
                        currentLine = "";
                    }
                    else {
                        currentLine += text[i];
                    }
                }
                if (currentLine != ""){
                    lines.push(currentLine);
                }
                return lines;
            }

            function translate() {

                var docTitle = document.getElementById('doc-title').value.trim();
                var model = document.getElementById('model').value;

                if(docTitle == ""){
                    document.getElementById('doc-title-error-label').classList.remove("invisible");
                }else{

                    document.getElementById('doc-title-error-label').classList.add("invisible");

                    translatingStatusStarted();

                    var sourceText = document.getElementById('source-text');
                    var text = splitLines(reconstructText(sourceText));
                    var paragraphLimit = 10;
                    var totalReply = "";
                    var currentText = "";

                    asyncTranslate(docTitle, model, reconstructText(sourceText), paragraphLimit, 0, totalReply)
                }

            }

            function endTranslate(totalReply, errorCode, charactersUsed) {
                var target = document.getElementById('target-text');
                target.innerHTML = totalReply;

                translatingStatusFinished(errorCode, charactersUsed);
            }

            function asyncTranslate(docTitle, model, sourceText, paragraphLimit, pos, totalReply) {

                if (sourceText != "") {

                    $( "#doc-title-form" ).val(docTitle);
                    $( "#model-form" ).val(model);
                    $( "#source-text-form" ).val(sourceText);

                    var url = "/translate"
                    $.post(url, $("#translate-form").serialize(), function(resp, status)
                    {
                        var reply = JSON.parse(resp)
                        var parsedReply = formatTextWithDiv(reply["Translation"]);
                        endTranslate(parsedReply, reply["Error"], reply["CharactersUsed"]);

                    })
                    .fail(function(xhr, status, error) {
                        alert("ERROR: Server replied with error message '"+xhr.responseText+"'");
                        endTranslate("", "", reply["CharactersUsed"]);
                    });
                }
                else {
                    endTranslate("", reply["Error"], reply["CharactersUsed"]);
                }
            }


            function exportTranslation(){
                var sourceTitle = document.getElementById('source-text');
                var sourceText = reconstructText(sourceTitle);
                var targetTitle = document.getElementById('target-text');
                var targetText = reconstructText(targetTitle);
                var url = "/translate/export?source=" + encodeURIComponent(sourceText) + "&target=" + encodeURIComponent(targetText);

                window.open(url, "_blank");
            }
        </script>
    </body>
</html>
{{end}}